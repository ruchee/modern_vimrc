snippet #       可执行标识
	#!/usr/bin/env escript
	${0}
snippet /       单行注释
	%% ${0}
snippet -       分隔注释
	%%----------------------------------------------------------------------${0}
# 模块指令
snippet im      导入其他模块的函数
	-import(${1:m_name}, [${2}]).${0}
snippet in      include
	-include("${1}").${0}
snippet inl     include_lib
	-include_lib("${1}").${0}
snippet df      定义宏
	-define(${1}, ${2}).${0}
snippet mo      标注模块的名字
	-module(`Filename()`).${0}
snippet ex      指定导出函数列表
	-export([${1}]).${0}
snippet extp    导出类型
	-export_type([${1}]).${0}
snippet cm      编译选项
	-compile(${1:export_all}).${0}
snippet re      记录 [元素个数固定的命名元组]
	-record(${1}, {${2}}).${0}
snippet v       指定模块版本号
	-vsn(${1}).${0}
snippet m       映射组 [元素个数不固定的键值对元组]
	#{ ${1} }${0}
# 常用结构
snippet f       函数定义 [同一行]
	${1:f_name}(${2}) -> ${0}
snippet f.      函数定义 [另起一行]
	${1:f_name}(${2}) ->
	    ${0}
snippet ff      匿名函数 [同一行]
	fun(${1}) -> ${0} end
snippet ff.     匿名函数 [另起一行]
	fun($1) ->
	    ${0}
	end
snippet rec     接收消息
	receive
	    ${0}
	end
snippet be      代码块
	begin
	    ${0}
	end
snippet se      发送消息
	${1} ! ${0}
snippet sp      派生进程
	spawn(${0})
snippet spl     派生并链接进程
	spawn_link(${0})
snippet spm     派生并监视进程
	spawn_monitor(${0})
snippet prf     将当前进程转变为系统进程
	process_flag(trap_exit, true)${0}
snippet li      将当前进程链接到某指定进程
	link(${0})
snippet uli     移除当前进程与某指定进程的链接
	unlink(${0})
snippet mon     添加监视
	monitor(process, ${0})
snippet dmon    移除监视
	demonitor(${0})
# 流程控制
snippet if      if
	if ${1}
	    ${0}
	end
snippet cs      case
	case ${1} of
	    ${0}
	end
snippet w       when
	when ${0}
# 异常处理
snippet try     监控代码段
	try ${1} of
	    ${0}
	end
snippet cat     捕获异常
	catch
	    ${0}
snippet aft     善后处理
	after${0}
snippet thr     抛出异常
	throw${0}
snippet err     抛出错误
	error${0}
snippet ext     终止当前进程
	exit${0}
# 单个关键字
snippet p       输出
	io:format("${1}")${0}
snippet s       当前进程的进程标识符
	self()${0}
# 其他
snippet <       <-
	<- ${0}
snippet >       ->
	-> ${0}
