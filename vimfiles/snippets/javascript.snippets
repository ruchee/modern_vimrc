snippet #       可执行标识
	#!/usr/bin/env node
	${0}
snippet /       单行注释
	// ${0}
snippet //      多行注释
	/*${0}*/
snippet -       分隔注释
	//----------------------------------------------------------------------${0}
# 全局相关
snippet u       使用特性
	"use ${1}";${0}
snippet us      严格模式
	"use strict";${0}
snippet rq      导入包
	require('${1}')${0}
snippet vrq     导入包到变量
	var ${1} = require('${2}')${0}
snippet lrq     导入包到变量
	let ${1} = require('${2}')${0}
snippet crq     导入包到常量
	const ${1} = require('${2}')${0}
snippet irq     导入包
	import ${1} = require('${2}')${0}
snippet im      导入模块 [ES6新增]
	import '${1}'${0}
snippet imf     从 .. 导入模块 [ES6新增]
	import ${1} from '${2}'${0}
snippet im<     从 .. 导入模块 [ES6新增]
	import { ${1} } from '${2}'${0}
snippet imf<    从 .. 导入模块 [ES6新增]
	import ${1}, { ${2} } from '${3}'${0}
snippet mo      模块
	module${0}
snippet ex      导出
	export ${0}
snippet exd     导出默认模块
	export default ${0}
snippet exp     按层次导出
	exports.${1} = ${2}${0}
snippet moex    顶层导出
	module.exports = ${1}${0}
snippet df      AMD模块定义
	define(${0})
# 类相关 [ES6新增]
snippet cl      类定义
	class ${1} {
	    ${0}
	}
snippet cle     类继承
	class ${1} extends ${2} {
	    ${0}
	}
snippet fc      构造方法
	constructor(${1}) {
	    ${0}
	}
snippet fc.     单行空构造方法
	constructor(${0}) {}
snippet cf      普通方法
	${1}(${2})${3} {
	    ${0}
	}
snippet _pt     指定原型
	__proto__${0}
# 函数、流程控制
snippet f       常规函数
	function ${1}(${2})${3} {
	    ${0}
	}
snippet ff      匿名函数 [ES5语法]
	function(${1})${2} {${0}}
snippet la      匿名函数 [单一参数箭头函数，行内直接return] [ES6语法]
	${1} => ${0}
snippet la.     匿名函数 [箭头函数，无自己的this]（带括号） [ES6语法]
	(${1}) => ${0}
snippet of      对象中的方法
	${1}: function(${2}) {
	    ${0}
	},
snippet oo      对象属性
	${1}: {
	    ${0}
	},
snippet fg      get方法
	get ${1}(${2})${3} {
	    ${0}
	}
snippet fs      set方法
	set ${1}(${2})${3} {
	    ${0}
	}
snippet wi      指定缺省对象
	with (${1}) {
	    ${0}
	}
snippet if      if
	if (${1}) {
	    ${0}
	}
snippet elif    else if
	else if (${1}) {
	    ${0}
	}
snippet el      else
	else {
	    ${0}
	}
snippet fo      for [ES6语法]
	for (let ${1}) {
	    ${0}
	}
snippet fi      for .. in [ES6语法]
	for (let ${1} in ${2}) {
	    ${0}
	}
snippet foo     for .. of [ES6语法]
	for (let ${1} of ${2}) {
	    ${0}
	}
snippet fe      forEach
	forEach(${0})
snippet wh      while
	while (${1}) {
	    ${0}
	}
snippet do      do .. while
	do {
	    ${0}
	} while (${1})
snippet sw      switch
	switch (${1}) {
	    ${0}
	}
snippet cs      case
	case ${1}:
	    ${0}
snippet def     default
	default:
	    ${0}
# 异常处理
snippet thr     抛出异常
	throw ${0}
snippet try     监控代码块
	try {
	    ${0}
	}
snippet cat     捕获异常
	catch (${1}) {
	    ${0}
	}
snippet fin     善后处理
	finally {
	    ${0}
	}
# 单个关键字
snippet co      继续
	continue${0}
snippet br      中断
	break${0}
snippet re      返回
	return ${0}
snippet yi      转移执行 [ES6新增]
	yield ${0}
snippet con     常量 [ES6新增]
	const ${0}
snippet c       常量 [ES6新增]
	const ${0}
snippet de      删除
	delete ${0}
snippet as      异步执行
	async ${0}
snippet aw      等待结果
	await ${0}
snippet ev      执行代码
	eval(${0})
snippet ct      构造器
	constructor${0}
snippet pt      原型
	prototype${0}
snippet to      类型
	typeof ${0}
snippet ins     实例
	instanceof ${0}
snippet udf     未定义
	undefined${0}
snippet arg     参数数组 [伪数组，其实是对象]
	arguments${0}
snippet win     Window对象
	window${0}
snippet doc     文档对象
	document${0}
snippet loc     位置对象
	location${0}
snippet nav     浏览器对象
	navigator${0}
snippet scr     屏幕对象
	screen${0}
snippet his     历史记录对象
	history${0}
snippet pie     可列举性
	propertyIsEnumerable(${0})
snippet len     获取字符串长度
	length${0}
snippet ext     继承
	extends ${0}
snippet imp     实现
	implements ${0}
# 常用函数
snippet ts      转换为字符串
	toString(${1})${0}
snippet vo      获取字符串表示
	valueOf()${0}
snippet isf     判断是否在可以表示的数值范围以内
	isFinite(${0})
snippet isn     判断是否为非数值
	isNaN(${0})
snippet pi      转换为整数
	parseInt(${0})
snippet pf      转换为浮点数
	parseFloat(${0})
snippet ho      仅对象本身的属性
	hasOwnProperty(${0})
snippet ip      是否是另一个对象的原型
	isPrototypeOf(${0})
snippet ap      apply
	apply${0}
snippet ca      call
	call${0}
snippet sp      分割字符串
	split('${0}')
# 字符串方法
snippet in      是否包含
	includes(${0})
snippet swi     是否在头部
	startsWith(${0})
snippet ewi     是否在尾部
	endsWith(${0})
snippet rep     重复N遍
	repeat(${0})
snippet tr      去除头尾空白字符
	trim()${0}
# 输出
snippet p       终端输出
	console.log(${0})
snippet e       标准错误输出
	console.error(${0})
snippet dw      文本打印
	document.writeln(${0})
snippet al      弹出框
	alert(${0})
# 预定义变量
snippet _f      当前脚本文件路径
	__filename${0}
snippet _d      当前脚本目录路径
	__dirname${0}
# 其他
snippet v       var
	var ${0}
snippet l       let
	let ${0}
snippet n       new
	new ${0}
snippet m       map
	map(${0})
snippet t       this
	this${0}
snippet s       self
	self${0}
snippet su      super
	super${0}
snippet st      static
	static ${0}
snippet nu      null
	null${0}
snippet r       / .. /
	/${0}/
snippet <       { .. }
	{ ${0} }
snippet ?       三元运算符
	${1} ? ${2} : ${0}
snippet {       ${ .. }
	${${0}
################
# DOM相关
snippet gbyi    根据id取单个元素
	getElementById('${0}')
snippet gbyn    根据name取多个元素
	getElementsByName('${0}')
snippet gbyc    根据class取多个元素
	getElementsByClassName('${0}')
snippet gbyt    根据标签名取多个元素
	getElementsByTagName('${0}')
snippet ga      取属性值
	getAttribute('${0}')
snippet sa      设置属性
	setAttribute('${1}', ${0})
################
snippet q       jQuery选择器
	$(${0})
snippet q.      jQuery选择器 [带引号]
	$('${1}')${0}
###############
